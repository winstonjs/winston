name: "Create Release PR"

on:
  workflow_dispatch:
    inputs:
      versionType:
        description: "What kind of version bump is this?"
        required: true
        type: choice
        options:
          - major
          - minor
          - patch
          - premajor
          - preminor
          - prepatch
          - prerelease
      baseBranch:
        description: "What base branch should be used for this release?" 
        required: false
        type: string
      dryRun:
        description: "Should publish be a dry run?"
        required: false
        default: false
        type: boolean

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    env: 
      DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
      ACTOR: ${{ github.actor }}
    steps:
      - name: Get Auth Token
        uses: tibdex/github-app-token@v1
        id: get_auth_token
        with: 
          app_id: ${{ vars.RELEASE_OPS_APP_ID }}
          private_key: ${{ secrets.RELEASE_OPS_PRIVATE_KEY }}

      - name: Define job env vars
        env:
          GH_TOKEN: ${{ steps.get_auth_token.outputs.token }}
        run: |
          isPR=$(gh api repos/${{ github.repository }}/pulls | jq -r '${{ format('.[].head.ref=="{0}"', inputs.baseBranch) }} // false' )
          ACTOR_INFO=$(gh api /users/${{ env.ACTOR }})
          ACTOR_ID=$(echo $ACTOR_INFO | jq -r '.id')
          ACTOR_EMAIL="$ACTOR_ID+$ACTOR@users.noreply.github.com"
          ACTOR_NAME=$(echo $ACTOR_INFO | jq -r '.name')

          echo "HAS_PR=$isPR" >> $GITHUB_ENV
          echo "ACTOR_NAME=$ACTOR_NAME" >> $GITHUB_ENV
          echo "ACTOR_EMAIL=$ACTOR_EMAIL" >> $GITHUB_ENV
    
      - name: Checkout Source
        uses: actions/checkout@v3
        with:
          token: ${{ steps.get_auth_token.outputs.token }}
          ref: ${{ inputs.baseBranch || env.DEFAULT_BRANCH }} 

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16
          registry-url: 'https://registry.npmjs.org'
          scope: ${{ vars.NPM_SCOPE }} # If this is not an organization I have to specify this.

      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: Bump Version (${{ inputs.versionType }})
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c-7)
          VERSION=$(npm version ${{ inputs.versionType }} ${{ startsWith(inputs.versionType, 'pre') && '--preid=RC' || '' }} --no-git-tag-version)
          echo "VERSION=${VERSION%-*}" >> $GITHUB_ENV
          echo "RC_VERSION=${VERSION#*-}" >> $GITHUB_ENV
          echo "FULL_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Commit changes
        id: commit-version-bump
        uses: EndBug/add-and-commit@v9.1.1
        with: 
          author_name: ${{ env.ACTOR_NAME }}
          author_email: ${{ env.ACTOR_EMAIL }}
          committer_name: "release-ops[bot]"
          committer_email: "124938743+release-ops[bot]@users.noreply.github.com"
          message: "Bumping Package - ${{ env.FULL_VERSION }}"
          push: ${{ env.HAS_PR == 'true' }} # Update existing release branch if available and this is a pre release variant, aka new release candidate

      # If version bump is not a pre-release and not a dry run, create release PR for human review
      - name: Open Release PR
        id: create-pr
        if: ${{ env.HAS_PR == 'false' && !inputs.dryRun && inputs.versionType != 'prerelease' }}
        uses: peter-evans/create-pull-request@v4
        with:
          token: ${{ steps.get_auth_token.outputs.token }}
          delete-branch: true
          branch: "release/${{ env.VERSION }}"
          title: "Release: ${{ env.VERSION }}"
          labels: "release, automated"
          author: "${{ env.ACTOR_NAME }} <${{ env.ACTOR_EMAIL }}>"
          committer: "release-ops[bot] <124938743+release-ops[bot]@users.noreply.github.com>"
          commit-message: "Bumping Package - ${{ env.FULL_VERSION }}"
          draft: ${{ startsWith(inputs.versionType, 'pre') }}

      # If a version bump was pushed or a new release pr was created, publish the new variant as long as it's not an official release
      - name: Publish pre-release package ${{ inputs.dryRun && '(Dry Run)' || '' }}
        if: ${{ startsWith(inputs.versionType, 'pre') && (steps.create-pr.outputs.pull-request-operation == 'created' || steps.commit-version-bump.outputs.pushed == 'true') }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PUBLISH_TOKEN }}
        run: npm publish --access public ${{ inputs.dryRun && '--dry-run' || '' }} --tag RC
